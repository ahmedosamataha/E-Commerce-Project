CREATE EXTENSION postgres_fdw;


CREATE SERVER foreignServer
	FOREIGN DATA WRAPPER postgres_fdw
    OPTIONS (host 'localhost', dbname 'foreign-db5');

CREATE USER MAPPING FOR postgres
	SERVER foreignServer
    OPTIONS (user 'postgres', password 'root');


CREATE TABLE IF NOT EXISTS "sellers" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "password" VARCHAR(255) NOT NULL, "email" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL)
PARTITION BY RANGE (id);

CREATE TABLE sellers1 PARTITION OF sellers FOR VALUES FROM('0') TO ('5');

CREATE FOREIGN TABLE sellers2 PARTITION OF sellers  FOR VALUES FROM('5') TO ('100')
SERVER foreignServer;
ALTER TABLE sellers1 ADD PRIMARY KEY (id);

CREATE TABLE IF NOT EXISTS "consumers" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "shippingAddress" VARCHAR(255) NOT NULL, "password" VARCHAR(255) NOT NULL, "email" VARCHAR(255) NOT NULL, "gender" BOOLEAN, "lastVisited" VARCHAR(255), "cash" INTEGER NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL)
PARTITION BY RANGE (id) ;
CREATE TABLE consumers1 PARTITION OF consumers FOR VALUES FROM('0') TO ('5');

CREATE FOREIGN TABLE consumers2 PARTITION OF consumers  FOR VALUES FROM('5') TO ('100')
SERVER foreignServer;
ALTER TABLE consumers1 ADD PRIMARY KEY (id);

CREATE TABLE IF NOT EXISTS "products" ("sellerId" INTEGER, "id"   SERIAL , "name" VARCHAR(255) NOT NULL, "tag" VARCHAR(255) NOT NULL, "price" DOUBLE PRECISION NOT NULL, "imageUrl" VARCHAR(255) NOT NULL, quantity INTEGER NOT NULL, "description" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL)
PARTITION BY RANGE ("sellerId");
CREATE TABLE products1 PARTITION OF products 
FOR VALUES FROM ('0') TO ('5');
CREATE FOREIGN TABLE products2 PARTITION OF products 
FOR VALUES FROM ('5') TO ('100') SERVER foreignServer;
ALTER TABLE products1 ADD PRIMARY KEY (id);
ALTER TABLE products1 ADD FOREIGN KEY ("sellerId") REFERENCES sellers1(id) ON DELETE SET NULL ON UPDATE CASCADE;
CREATE TABLE IF NOT EXISTS "carts" ("id"  SERIAL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "consumerId" INTEGER )
PARTITION BY RANGE("consumerId");
CREATE TABLE carts1 PARTITION OF carts 
FOR VALUES FROM ('0') TO ('5');
CREATE FOREIGN TABLE carts2 PARTITION OF carts 
FOR VALUES FROM ('5') TO ('100') SERVER foreignServer;
ALTER TABLE carts1 ADD PRIMARY KEY (id);
ALTER TABLE carts1 ADD FOREIGN KEY ("consumerId") REFERENCES consumers1(id) ON DELETE SET NULL ON UPDATE CASCADE;
CREATE TABLE IF NOT EXISTS "cartItems" ("id"  SERIAL , "quantity" INTEGER NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "productId" INTEGER, "cartId" INTEGER)
PARTITION BY RANGE (id) ;
CREATE TABLE "cartItems1" PARTITION OF "cartItems" FOR VALUES FROM('0') TO ('20');
CREATE FOREIGN TABLE "cartItems2" PARTITION OF "cartItems"  FOR VALUES FROM('20') TO ('400')
SERVER foreignServer;
ALTER TABLE "cartItems1" ADD PRIMARY KEY (id);
ALTER TABLE "cartItems1" ADD FOREIGN KEY ("productId") REFERENCES products1(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE "cartItems1" ADD FOREIGN KEY ("cartId") REFERENCES carts1(id) ON DELETE CASCADE ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS "orders" ("id"  SERIAL , "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "consumerId" INTEGER)
PARTITION BY RANGE ("consumerId") ;
CREATE TABLE orders1 PARTITION OF orders FOR VALUES FROM('0') TO ('5');
CREATE FOREIGN TABLE orders2 PARTITION OF orders  FOR VALUES FROM('5') TO ('100')
SERVER foreignServer;
ALTER TABLE orders1 ADD PRIMARY KEY (id);
ALTER TABLE orders1 ADD FOREIGN KEY ("consumerId") REFERENCES "consumers1" ("id") ON DELETE SET NULL ON UPDATE CASCADE;
CREATE TABLE IF NOT EXISTS "orderItems" ("id"   SERIAL , "quantity" INTEGER NOT NULL, "discount" DOUBLE PRECISION NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "productId" INTEGER, "orderId" INTEGER )
PARTITION BY RANGE (id) ;
CREATE TABLE "orderItems1" PARTITION OF "orderItems" FOR VALUES FROM('0') TO ('20');
CREATE FOREIGN TABLE "orderItems2" PARTITION OF "orderItems"  FOR VALUES FROM('20') TO ('400')
SERVER foreignServer;
ALTER TABLE "orderItems1" ADD PRIMARY KEY (id);
ALTER TABLE "orderItems1" ADD FOREIGN KEY ("productId") REFERENCES products1(id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE "orderItems1" ADD FOREIGN KEY ("orderId") REFERENCES orders1(id) ON DELETE CASCADE ON UPDATE CASCADE;
CREATE TABLE IF NOT EXISTS "reviews" ("id"   SERIAL , "rate" INTEGER, "text" VARCHAR(255), "consumerName" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "productId" INTEGER)
PARTITION BY RANGE(id);
CREATE TABLE reviews1 PARTITION OF reviews FOR VALUES FROM('0') TO ('5');
CREATE FOREIGN TABLE reviews2 PARTITION OF reviews  FOR VALUES FROM('5') TO ('100')
SERVER foreignServer;
ALTER TABLE reviews1 ADD PRIMARY KEY (id);
ALTER TABLE reviews1 ADD FOREIGN KEY ("productId") REFERENCES products1(id) ON DELETE SET NULL ON UPDATE CASCADE;

CREATE TABLE IF NOT EXISTS "offers" ("id"  SERIAL , "quantity" INTEGER NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "consumerId" INTEGER )
PARTITION BY RANGE (id) ;
CREATE TABLE offers1 PARTITION OF offers FOR VALUES FROM('0') TO ('5');
CREATE FOREIGN TABLE offers2 PARTITION OF offers  FOR VALUES FROM('5') TO ('100')
SERVER foreignServer;
ALTER TABLE offers1 ADD PRIMARY KEY (id);
ALTER TABLE offers1 ADD FOREIGN KEY ("consumerId") REFERENCES consumers1(id) ON DELETE SET NULL ON UPDATE CASCADE;






















